version: 2
jobs:
  build:
    docker:
      - image: circleci/node:dubnium-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}
            - dependencies-
      - run:
          name: Greeting
          command: echo Hello, world.
      # - run:
      #     name: test to see if there are the env var
      #     command: echo "env var  " && echo $NETLIFY_AUTH_TOKEN
      - run:
          name: Print the Current Time
          command: date
      - run :
          name: yarn install cmd
          command: yarn install
      - run :
          name: yarn build cmd
          command: yarn build
      - run:
          name: Copy artifacts to workspace
          command: |
            cp ./dist /tmp/server-build -r
      - store_artifacts:
          path: /tmp/server-build
      - save_cache:
          paths:
            - ./cache-folder
          key: v1-dependencies-{{ .Environment.CACHE_VERSION }}

  deploy:
    docker:
      - image: circleci/node:dubnium-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}
            - dependencies-
      - store_artifacts:
          path: /tmp/server-build
      - run:
          name: Deploy app
          command: npx netlify-cli deploy --prod --auth $NETLIFY_AUTH_TOKEN --site $NETLIFY_SITE_ID_FINALTPFRT --dir=/tmp/server-build

  #copy from cd tp
  doc-build:
    docker:
      - image: circleci/node:dubnium-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}
            - dependencies-
      - run: yarn doc:build
      - run:
          name: Copy deployment artifacts to workspace
          command: |
            cp doc-server/ /tmp/server-doc -r
      - store_artifacts:
          path: /tmp/server-build
      - persist_to_workspace:
          root: /tmp
          paths:
            - server-doc

  # test:
  #   docker:
  #     - image: debian:stretch
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - dependencies-{{ .Environment.CACHE_VERSION }}
  #           # fallback to using the latest cache if no exact match is found
  #           - dependencies-
  # buildforprod:
  #   docker:
  #     - image: debian:stretch
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - dependencies-{{ .Environment.CACHE_VERSION }}
  #           # fallback to using the latest cache if no exact match is found
  #           - dependencies-
  #     - run:
  #         comand: yarn build

workflows:
  version: 2
  build-general:
    jobs:
      - build
      # - build:
      #     requires:
      #       - install
      # - apply-db-schema:
      #     requires:
      #       - install
      - deploy:
          requires:
            - build
      # - test:
      #     requires:
      #       - build
      # - buildforprod:
      #     requires:
      #       - build
      #       - test